end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
testout <- data.setup(test, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids, loc_precision=4)
mytest <- read.csv("~/Downloads/cal_20m_up.csv")
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids, loc_precision=4)
head(testout)
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
loc_precision <- NA
test <- mytest
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
test$time <- test[,time_col]
any(colnames(test) == "beep_number")
test.info <- test
test.info$TestId <- seq(1:nrow(test)) #paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 60
test.info$Stop.Time <- test.info$time - 60
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test$TestId <- seq(1:nrow(test))
data.setup <- function(test, tag_col, tagid, time_col, timezone, x, y, node_ids = NA, loc_precision = NA, latlon=T) {
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
if(length(time_col) < 2) {
test$time <- test[,time_col]
if(is.na(loc_precision)) {
if(any(colnames(test) == "beep_number")) {
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 60
test.info$Stop.Time <- test.info$time - 60
}
} else {
multfactor = 10^loc_precision
test$lat <- format(trunc(test[,y]*multfactor)/multfactor, nsmall=loc_precision)
test$lon <- format(trunc(test[,x]*multfactor)/multfactor, nsmall=loc_precision)
test$id <- paste(test$lat, test$lon, sep="_")
test <- test %>%
mutate(c_diff = ifelse(id != lag(id), 1, 0))
test$c_diff[1] <- 0
test$TestId <- cumsum(test$c_diff)
test.info <- setDT(test)[, .(Start.Time = min(time), Stop.Time = max(time)), by = TestId]
test.info$id <- test$id[match(test.info$TestId, test$TestId)]
testid <- test[!duplicated(test$id),]
test.info$TestId <- testid$TestId[match(test.info$id, testid$id)]
test.info$lat <- as.numeric(test$lat[match(test.info$TestId, test$TestId)])
test.info$lon <- as.numeric(test$lon[match(test.info$TestId, test$TestId)])
}
} else {test.info <- test}
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
#}
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
test <- mytest
data.setup <- function(test, tag_col, tagid, time_col, timezone, x, y, node_ids = NA, loc_precision = NA, latlon=T) {
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
if(length(time_col) < 2) {
test$time <- test[,time_col]
if(is.na(loc_precision)) {
if(any(colnames(test) == "beep_number")) {
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 60
test.info$Stop.Time <- test.info$time - 60
}
} else {
multfactor = 10^loc_precision
test$lat <- format(trunc(test[,y]*multfactor)/multfactor, nsmall=loc_precision)
test$lon <- format(trunc(test[,x]*multfactor)/multfactor, nsmall=loc_precision)
test$id <- paste(test$lat, test$lon, sep="_")
test <- test %>%
mutate(c_diff = ifelse(id != lag(id), 1, 0))
test$c_diff[1] <- 0
test$TestId <- cumsum(test$c_diff)
test.info <- setDT(test)[, .(Start.Time = min(time), Stop.Time = max(time)), by = TestId]
test.info$id <- test$id[match(test.info$TestId, test$TestId)]
testid <- test[!duplicated(test$id),]
test.info$TestId <- testid$TestId[match(test.info$id, testid$id)]
test.info$lat <- as.numeric(test$lat[match(test.info$TestId, test$TestId)])
test.info$lon <- as.numeric(test$lon[match(test.info$TestId, test$TestId)])
}
} else {test.info <- test}
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
#}
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
test$time <- test[,time_col]
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 60
test.info$Stop.Time <- test.info$time - 60
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
head(test.dat)
head(test.info)
head(testdata)
data.setup <- function(test, tag_col, tagid, time_col, timezone, x, y, node_ids = NA, loc_precision = NA, latlon=T) {
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
if(length(time_col) < 2) {
test$time <- test[,time_col]
if(is.na(loc_precision)) {
if(any(colnames(test) == "beep_number")) {
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 1
test.info$Stop.Time <- test.info$time + 1
}
} else {
multfactor = 10^loc_precision
test$lat <- format(trunc(test[,y]*multfactor)/multfactor, nsmall=loc_precision)
test$lon <- format(trunc(test[,x]*multfactor)/multfactor, nsmall=loc_precision)
test$id <- paste(test$lat, test$lon, sep="_")
test <- test %>%
mutate(c_diff = ifelse(id != lag(id), 1, 0))
test$c_diff[1] <- 0
test$TestId <- cumsum(test$c_diff)
test.info <- setDT(test)[, .(Start.Time = min(time), Stop.Time = max(time)), by = TestId]
test.info$id <- test$id[match(test.info$TestId, test$TestId)]
testid <- test[!duplicated(test$id),]
test.info$TestId <- testid$TestId[match(test.info$id, testid$id)]
test.info$lat <- as.numeric(test$lat[match(test.info$TestId, test$TestId)])
test.info$lon <- as.numeric(test$lon[match(test.info$TestId, test$TestId)])
}
} else {test.info <- test}
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
#}
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
head(test)
data.setup <- function(test, tag_col, tagid, time_col, timezone, x, y, node_ids = NA, loc_precision = NA, latlon=T) {
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
if(length(time_col) < 2) {
test$time <- test[,time_col]
if(is.na(loc_precision)) {
if(any(colnames(test) == "beep_number")) {
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 1
test.info$Stop.Time <- test.info$time + 1
}
} else {
multfactor = 10^loc_precision
test$lat <- format(trunc(test[,y]*multfactor)/multfactor, nsmall=loc_precision)
test$lon <- format(trunc(test[,x]*multfactor)/multfactor, nsmall=loc_precision)
test$id <- paste(test$lat, test$lon, sep="_")
test <- test %>%
mutate(c_diff = ifelse(id != lag(id), 1, 0))
test$c_diff[1] <- 0
test$TestId <- cumsum(test$c_diff)
test.info <- setDT(test)[, .(Start.Time = min(time), Stop.Time = max(time)), by = TestId]
test.info$id <- test$id[match(test.info$TestId, test$TestId)]
testid <- test[!duplicated(test$id),]
test.info$TestId <- testid$TestId[match(test.info$id, testid$id)]
}
test.info$lat <- as.numeric(test$lat[match(test.info$TestId, test$TestId)])
test.info$lon <- as.numeric(test$lon[match(test.info$TestId, test$TestId)])
} else {
test.info <- test
test.info$lat <- test[,y]
test.info$lon <- test[,x]}
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
#}
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
data.setup <- function(test, tag_col, tagid, time_col, timezone, x, y, node_ids = NA, loc_precision = NA, latlon=T) {
test$tag_id <- test[,tag_col]
test <- test[test$tag_id %in% tagid,]
outtime <- lapply(time_col, out, contents=test, timezone=timezone)
test[time_col] <- outtime
if(length(time_col) < 2) {
test$time <- test[,time_col]
if(is.na(loc_precision)) {
if(any(colnames(test) == "beep_number")) {
test$TestId <- seq(1:nrow(test))
test.info <- test
#paste(format(test$Time, "%Y-%m-%d %H:%M"), test$beep_number, sep="_")
test.info$Start.Time <- test.info$time - 1
test.info$Stop.Time <- test.info$time + 1
test.info$lat <- test[,y]
test.info$lon <- test[,x]
}
} else {
multfactor = 10^loc_precision
test$lat <- format(trunc(test[,y]*multfactor)/multfactor, nsmall=loc_precision)
test$lon <- format(trunc(test[,x]*multfactor)/multfactor, nsmall=loc_precision)
test$id <- paste(test$lat, test$lon, sep="_")
test <- test %>%
mutate(c_diff = ifelse(id != lag(id), 1, 0))
test$c_diff[1] <- 0
test$TestId <- cumsum(test$c_diff)
test.info <- setDT(test)[, .(Start.Time = min(time), Stop.Time = max(time)), by = TestId]
test.info$id <- test$id[match(test.info$TestId, test$TestId)]
testid <- test[!duplicated(test$id),]
test.info$TestId <- testid$TestId[match(test.info$id, testid$id)]
test.info$lat <- as.numeric(test$lat[match(test.info$TestId, test$TestId)])
test.info$lon <- as.numeric(test$lon[match(test.info$TestId, test$TestId)])
}
} else {
test.info <- test
test.info$lat <- test[,y]
test.info$lon <- test[,x]}
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
#if(length(tagid) > 1) {
df1 <- test %>%
group_by(TestId) %>%
summarise(tag_id = list(unique(tagid))) %>%
unnest(tag_id)
test.info <- left_join(test.info, df1)
#}
start <- min(test.info$Start.Time)
end <- max(test.info$Stop.Time)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = TRUE)
testdata <- tbl(con, "blu") |>
filter(time >= start & time <= end) |>
filter(tag_id %in% tagid) |>
collect()
#testdata$syncid <- paste(format(testdata$time, "%Y-%m-%d %H:%M"), testdata$sync, sep="_")
start_buff = start - 2*60*60
end_buff = end + 2*60*60
nodes <- tbl(con, "node_health") |>
filter(time >= start_buff  & time <= end_buff) |>
collect()
DBI::dbDisconnect(con)
test.dat <- setDT(testdata)[test.info,  TestId := +(i.TestId), on = .(tag_id, time > Start.Time, time < Stop.Time), by = .EACHI]
test.dat <- test.dat[!is.na(test.dat$TestId),]
summary.test.tags <- test.dat %>%
dplyr::group_by(node_id, TestId) %>%
dplyr::summarise(avgRSS = mean(tag_rssi),
sdRSS = sd(tag_rssi),
n.det = n())
if(any(!is.na(node_ids))) {nodes <- nodes[nodes$node_id %in% node_ids,]}
nodes <- node_file(nodes)
dst <- raster::pointDistance(test.UTM[,c("lon", "lat")], nodes[,c("node_lng", "node_lat")], lonlat = latlon, allpairs = T)
dist_df <- data.frame(dst, row.names = test.UTM$TestId)
colnames(dist_df) <- nodes$node_id
dist_df$TestId <- as.integer(rownames(dist_df))
dist.gather <- dist_df %>%
tidyr::gather(key = "node_id", value = "distance", -TestId)
summary.dist <- summary.test.tags %>%
dplyr::left_join(dist.gather)
# Add UTMs of nodes and test locations to dataset
combined.data <- summary.dist %>%
dplyr::left_join(nodes[, c("node_id", "node_lat", "node_lng")]) %>%
dplyr::left_join(test.UTM[, c("TestId", "lat", "lon")])
return(combined.data)}
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
head(testout)
# Plot of the relationship between RSS and distance
ggplot(data = combined.data, aes(x = distance, y = avgRSS, color = node_id)) +
geom_point(size = 2)
testout <- data.setup(mytest, tag_col="Tag.Id", tagid="0C5F5CED", time_col="Time..UTC.",timezone="UTC",x="Longitude",y="Latitude", node_ids=node_ids) #, loc_precision=4
