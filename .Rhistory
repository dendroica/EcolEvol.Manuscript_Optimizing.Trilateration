if (length(myrowfix) > 9) {
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
# contents <- newcontents
}
ignore
if(!ignore){
rowtest <- badrow(e, contents, filetype)
contents <- rowtest[[1]]
} else {
rowtest <- list(contents,0)
#myrowfix <- c()
}
rowtest
contents
if (length(delete.columns) > 0) {
if (ncol(contents) > 9 & ncol(contents) < 14) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius", "RecordedAt", "firmware", "SolarVolts", "SolarCurrent", "CumulativeSolarCurrent", "latitude", "longitude")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], as.integer(myrowfix[4]), as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), as.POSIXct(myrowfix[7], tz = "UTC"), myrowfix[8], as.numeric(myrowfix[9]), as.numeric(myrowfix[10]), as.numeric(myrowfix[11]), as.numeric(myrowfix[12]), as.numeric(myrowfix[13]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else if (ncol(contents) < 9) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius")
}
}
contents
devtools::update_packages("celltracktech")
devtools::update_packages("celltracktech")
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
library(celltracktech)
library(DBI)
library(RPostgres)
library(duckdb)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
tbl(con, "raw") %>%
ungroup() %>%
summarise(num = n())
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
dataduck <- tbl(con, "data_file") %>% pull()
dataduck
#db_cleanup(conn)
dbDisconnect(con)
source("~/Documents/R/api_run_sean.R")
source("~/Documents/R/api_run_sean.R")
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
tbl(con, "raw") %>%
ungroup() %>%
summarise(num = n())
dbDisconnect(con)
library(DBI)
?dbConnect
source("~/Documents/R/api_run_sean.R")
e <- "~/Documents/radio_projects/data/radio_projects/office/CTT Office/V30B0154B577/blu/CTT-V30B0154B577-blu.2024-09-17_200104.csv.gz"
filetype <- "blu"
print(paste("checking file for errors:", e))
file_err <- 0
myrowfix <- c()
ignore <- FALSE
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
e
e <- "~/Documents/radio_projects/data/radio_projects/office/CTT Office/V30B0154B577/blu/CTT-V30B0154B577-blu.2024-09-18_235045.csv.gz"
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
head(contents)
delete.columns <- grep("[[:digit:]]", colnames(contents), perl = T)
length(delete.columns) > 0
file_err <- 1
myrowfix <- Correct_Colnames(contents)
source("~/Documents/R/celltracktech/R/api_postgres.R")
myrowfix <- Correct_Colnames(contents)
myrowfix
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix
length(myrowfix[3])
myrowfix[3]==""
myrowfix <- tryCatch(
{
myrowfix <- Correct_Colnames(contents)
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix[3] <- ifelse(myrowfix[3]=="", NA, myrowfix[3])
myrowfix[4] <- strsplit(Correct_Colnames(contents)[4], "\\.\\.")[[1]][1]
myrowfix[5] <- strsplit(Correct_Colnames(contents)[5], "\\.\\.")[[1]][1]
if (nchar(myrowfix[5]) < 1) {
myrowfix[5] <- NA
}
if (length(myrowfix) > 5) {
myrowfix[6] <- strsplit(Correct_Colnames(contents)[6], "[.]")[[1]][1]
}
if (length(myrowfix) > 6) {
myrowfix[7] <- strsplit(Correct_Colnames(contents)[7], "\\.\\.")[[1]][1]
myrowfix[7] <- strsplit(myrowfix[7], "[_]")[[1]][1]
myrowfix[8] <- strsplit(Correct_Colnames(contents)[8], "\\.\\.")[[1]][1]
}
if (length(myrowfix) > 9) {
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
myrowfix
myrowfix <- tryCatch(
{
myrowfix <- Correct_Colnames(contents)
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix[3] <- ifelse(myrowfix[3]=="", NA, myrowfix[3])
myrowfix[4] <- strsplit(Correct_Colnames(contents)[4], "\\.\\.")[[1]][1]
myrowfix[5] <- strsplit(Correct_Colnames(contents)[5], "\\.\\.")[[1]][1]
if (nchar(myrowfix[5]) < 1) {
myrowfix[5] <- NA
}
if (length(myrowfix) > 5) {
myrowfix[6] <- strsplit(Correct_Colnames(contents)[6], "[.]")[[1]][1]
}
if (length(myrowfix) > 6) {
myrowfix[7] <- strsplit(Correct_Colnames(contents)[7], "\\.\\.")[[1]][1]
myrowfix[7] <- strsplit(myrowfix[7], "[_]")[[1]][1]
myrowfix[8] <- strsplit(Correct_Colnames(contents)[8], "\\.\\.")[[1]][1]
}
if (length(myrowfix) > 9) {
myrowfix[10] <- strsplit(Correct_Colnames(contents)[10], "\\.\\.")[[1]][1]
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
myrowfix
myrowfix <- tryCatch(
{
myrowfix <- Correct_Colnames(contents)
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix[3] <- ifelse(myrowfix[3]=="", NA, myrowfix[3])
myrowfix[4] <- strsplit(Correct_Colnames(contents)[4], "\\.\\.")[[1]][1]
myrowfix[5] <- strsplit(Correct_Colnames(contents)[5], "\\.\\.")[[1]][1]
if (nchar(myrowfix[5]) < 1) {
myrowfix[5] <- NA
}
if (length(myrowfix) > 5) {
myrowfix[6] <- strsplit(Correct_Colnames(contents)[6], "[.]")[[1]][1]
}
if (length(myrowfix) > 6) {
myrowfix[7] <- strsplit(Correct_Colnames(contents)[7], "\\.\\.")[[1]][1]
myrowfix[7] <- strsplit(myrowfix[7], "[_]")[[1]][1]
myrowfix[8] <- strsplit(Correct_Colnames(contents)[8], "\\.\\.")[[1]][1]
}
if (length(myrowfix) > 9) {
myrowfix[10] <- strsplit(Correct_Colnames(contents)[10], "\\.\\.")[[1]][1]
myrowfix[10] <- ifelse(myrowfix[10]=="", NA, myrowfix[10])
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
myrowfix
e1 <- "~/Documents/radio_projects/data/radio_projects/office/CTT Office/V30B0154B577/blu/CTT-V30B0154B577-blu.2024-09-17_200104.csv.gz"
contents1 <- readr::read_csv(e)
contents1 <- readr::read_csv(e1)
head(contents1)
str(contents)
head(contents)
myrowfix
source("~/Documents/R/celltracktech/R/api_postgres.R")
out <- file_handle(e, "blu")
out
source("~/Documents/R/celltracktech/R/api_postgres.R")
out <- file_handle(e, "blu")
out
print(paste("checking file for errors:", e))
file_err <- 0
myrowfix <- c()
ignore <- FALSE
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
if (filetype == "raw" & ncol(contents) > 6) {
contents <- contents[,1:6]
ignore <- TRUE
}
delete.columns <- grep("[[:digit:]]", colnames(contents), perl = T)
if (length(delete.columns) > 0) {
file_err <- 1
myrowfix <- tryCatch(
{
myrowfix <- Correct_Colnames(contents)
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix[3] <- ifelse(myrowfix[3]=="", NA, myrowfix[3])
myrowfix[4] <- strsplit(Correct_Colnames(contents)[4], "\\.\\.")[[1]][1]
myrowfix[5] <- strsplit(Correct_Colnames(contents)[5], "\\.\\.")[[1]][1]
if (nchar(myrowfix[5]) < 1) {
myrowfix[5] <- NA
}
if (length(myrowfix) > 5) {
myrowfix[6] <- strsplit(Correct_Colnames(contents)[6], "[.]")[[1]][1]
}
if (length(myrowfix) > 6) {
myrowfix[7] <- strsplit(Correct_Colnames(contents)[7], "\\.\\.")[[1]][1]
myrowfix[7] <- strsplit(myrowfix[7], "[_]")[[1]][1]
myrowfix[8] <- strsplit(Correct_Colnames(contents)[8], "\\.\\.")[[1]][1]
}
if (length(myrowfix) > 9) {
myrowfix[10] <- strsplit(Correct_Colnames(contents)[10], "\\.\\.")[[1]][1]
myrowfix[10] <- ifelse(myrowfix[10]=="", NA, myrowfix[10])
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
# contents <- newcontents
}
if(!ignore & !filetype=="blu"){
rowtest <- badrow(e, contents, filetype)
contents <- rowtest[[1]]
} else {
rowtest <- list(contents,0)
#myrowfix <- c()
}
length(delete.columns) > 0
ncol(contents) > 8
names(contents) <- c("UsbPort","BluRadioId","RadioId","Time","TagRSSI","TagId","Sync","Product","Revision","NodeId","Payload")
rowfix <- data.frame(as.integer(myrowfix[1]), as.integer(myrowfix[2]), myrowfix[3], as.POSIXct(myrowfix[4], tz = "UTC"), as.integer(myrowfix[5]), as.character(myrowfix[6]), as.integer(myrowfix[7]), myrowfix[8], myrowfix[9], myrowfix[10], as.character(myrowfix[11]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
head(contents)
contents <- contents[(nchar(contents$NodeId) == 8 | is.na(contents$NodeId)),]
head(contents)
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
if (filetype == "raw") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 5) {
names(contents) <- c("Time", "RadioId", "TagId", "TagRSSI", "NodeId", "Validated")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], myrowfix[4], myrowfix[5], as.integer(myrowfix[6]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else {
names(contents) <- c("Time", "RadioId", "TagId", "TagRSSI", "NodeId")
}
}
contents <- contents[(nchar(contents$NodeId) == 6 | is.na(contents$NodeId)),]
# correct <- ifelse(v > 2, 7, 6)
# rowtest <- badrow(e, correct, contents)
# contents <- rowtest[[1]]
# if(file_err < 1) {
#  file_err <- rowtest[[2]]
# }
} else if (filetype == "gps") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 8) {
names(contents) <- c("recorded.at", "gps.at", "latitude", "longitude", "altitude", "quality", "mean.lat", "mean.lng", "n.fixes")
if (length(myrowfix) > 6) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.POSIXct(myrowfix[2], tz = "UTC"), myrowfix[3], myrowfix[4], as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), myrowfix[7], myrowfix[8], as.numeric(myrowfix[9]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else {
names(contents) <- c("recorded.at", "gps.at", "latitude", "longitude", "altitude", "quality")
} # not fixing rows for v1
}
} else if (filetype == "node_health") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 9 & ncol(contents) < 14) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius", "RecordedAt", "firmware", "SolarVolts", "SolarCurrent", "CumulativeSolarCurrent", "latitude", "longitude")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], as.integer(myrowfix[4]), as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), as.POSIXct(myrowfix[7], tz = "UTC"), myrowfix[8], as.numeric(myrowfix[9]), as.numeric(myrowfix[10]), as.numeric(myrowfix[11]), as.numeric(myrowfix[12]), as.numeric(myrowfix[13]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else if (ncol(contents) < 9) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius")
}
}
contents <- contents[(nchar(contents$NodeId) == 6 | nchar(contents$NodeId) == 8),]
}} else if(filetype=="blu") {
if (filetype == "raw") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 5) {
names(contents) <- c("Time", "RadioId", "TagId", "TagRSSI", "NodeId", "Validated")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], myrowfix[4], myrowfix[5], as.integer(myrowfix[6]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else {
names(contents) <- c("Time", "RadioId", "TagId", "TagRSSI", "NodeId")
}
}
contents <- contents[(nchar(contents$NodeId) == 6 | is.na(contents$NodeId)),]
# correct <- ifelse(v > 2, 7, 6)
# rowtest <- badrow(e, correct, contents)
# contents <- rowtest[[1]]
# if(file_err < 1) {
#  file_err <- rowtest[[2]]
# }
} else if (filetype == "gps") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 8) {
names(contents) <- c("recorded.at", "gps.at", "latitude", "longitude", "altitude", "quality", "mean.lat", "mean.lng", "n.fixes")
if (length(myrowfix) > 6) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.POSIXct(myrowfix[2], tz = "UTC"), myrowfix[3], myrowfix[4], as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), myrowfix[7], myrowfix[8], as.numeric(myrowfix[9]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else {
names(contents) <- c("recorded.at", "gps.at", "latitude", "longitude", "altitude", "quality")
} # not fixing rows for v1
}
} else if (filetype == "node_health") {
if (length(delete.columns) > 0) {
if (ncol(contents) > 9 & ncol(contents) < 14) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius", "RecordedAt", "firmware", "SolarVolts", "SolarCurrent", "CumulativeSolarCurrent", "latitude", "longitude")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], as.integer(myrowfix[4]), as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), as.POSIXct(myrowfix[7], tz = "UTC"), myrowfix[8], as.numeric(myrowfix[9]), as.numeric(myrowfix[10]), as.numeric(myrowfix[11]), as.numeric(myrowfix[12]), as.numeric(myrowfix[13]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else if (ncol(contents) < 9) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius")
}
}
contents <- contents[(nchar(contents$NodeId) == 6 | nchar(contents$NodeId) == 8),]
} else if(filetype=="blu") {
#rowtest <- list(contents,0)
if (length(delete.columns) > 0) {
if (ncol(contents) > 8) {
names(contents) <- c("UsbPort","BluRadioId","RadioId","Time","TagRSSI","TagId","Sync","Product","Revision","NodeId","Payload")
rowfix <- data.frame(as.integer(myrowfix[1]), as.integer(myrowfix[2]), myrowfix[3], as.POSIXct(myrowfix[4], tz = "UTC"), as.integer(myrowfix[5]), as.character(myrowfix[6]), as.integer(myrowfix[7]), myrowfix[8], myrowfix[9], myrowfix[10], as.character(myrowfix[11]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
}
contents <- contents[(nchar(contents$NodeId) == 8 | is.na(contents$NodeId)),]
}
head(contents)
source("~/Documents/R/celltracktech/R/api_postgres.R")
source("~/Documents/R/celltracktech/R/api_postgres.R")
out <- file_handle(e, "blu")
out
devtools::update_packages("celltracktech")
source("~/Documents/R/api_run_sean.R")
source("~/Documents/radio_projects/EcolEvol.Manuscript_Optimizing.Trilateration/1_Github_RSS_by_Distance_Calibration.R")
getwd()
source("~/Documents/radio_projects/EcolEvol.Manuscript_Optimizing.Trilateration/1_Github_RSS_by_Distance_Calibration.R")
# Packages needed
library(dplyr)
library(lubridate)
library(ggplot2)
# Reset R's brain - removes all previous objects
rm(list=ls())
## Set by User
# Working Directory - Provide/path/on/your/computer/where/master/csv/file/of/nodes/is/found/and/where/Functions_CTT.Network.R/is/located
working.directory <- "/home/jess/Documents/radio_projects/EcolEvol.Manuscript_Optimizing.Trilateration"
# Directory for Output data - Provide/path/where/you/want/output/data/to/be/stored/
outpath <- "/home/jess/Documents/radio_projects/paxton/"
## Bring in functions
setwd(working.directory)
source("4_Functions_RSS.Based.Localizations.R")
## Bring in 3 Needed files - Test Information, RSS values, and Node Information - change file names in " " as needed
test.info <- read.csv("Test.Info_Example.csv", header = T)
str(test.info) # check that data imported properly
beep.dat <- readRDS("BeepData_Example.rds")
str(beep.dat) # check that data imported properly
nodes <- read.csv("Nodes_Example.csv", header = T)
str(nodes)
##* Define Variables - replace values below with user specified values **##
TEST.TYPE <- "Calibration"
DATE.FORMAT <- "%m/%d/%y"
TIME.ZONE <- "Pacific/Guam"
# Combine RSS data from a node network with test information into a dataframe
combined.data <- data.setup(TEST.TYPE, DATE.FORMAT, TIME.ZONE)
# Plot of the relationship between RSS and distance
ggplot(data = combined.data, aes(x = distance, y = avgRSS, color = NodeId)) +
geom_point(size = 2)
# Preliminary Model
exp.mod <- nls(avgRSS ~ SSasymp(distance, Asym, R0, lrc), data = combined.data)
head(combined.data)
combined.data
head(beep.dat)
beep.dat
head(test.info)
test.info
# Format date
test.info$Date <- as.Date(test.info$Date, format = DATE.FORMAT)
# Bring together tag, date, hour, min
test.info <- test.info %>%
dplyr::mutate(Tag.Date.HM = paste(TagId, Date, Hour, Min, sep = "_"))
# Make TestId a factor
test.info$TestId <- as.factor(test.info$TestId)
# Make a dataframe with only 1 row per test
test.UTM <- test.info %>%
dplyr::group_by(TestId) %>%
dplyr::slice_head(n=1)
# Add column for date, hour and min and then bring together with TagId
beep.dat$Hour <- lubridate::hour(beep.dat$Time.local)
beep.dat$Min <- lubridate::minute(beep.dat$Time.local)
beep.dat$Date <- as.Date(beep.dat$Time.local, tz = TIME.ZONE)
beep.dat <- beep.dat %>%
dplyr::mutate(Tag.Date.HM = paste(TagId, Date, Hour, Min, sep = "_"))
head(beep.dat)
beep.dat
head(test.dat)
head(test.info)
## Isolate raw RSS values associated with the test data
test.dat <- beep.dat %>%
dplyr::filter(Tag.Date.HM %in% test.info$Tag.Date.HM) %>%
dplyr::left_join(test.info[,c("Tag.Date.HM", "TestId")])
head(test.dat)
test.dat
## Calculate average RSS value for each unique test and node
summary.test.tags <- test.dat %>%
dplyr::group_by(NodeId, TestId) %>%
dplyr::summarise(avgRSS = mean(TagRSSI),
sdRSS = sd(TagRSSI),
n.det = n())
summary.test.tags
unique(test.dat$NodeId)
str(test.dat)
unique(test.dat$NodeId)
unique(beep.dat$NodeId)
unique(test.dat$Tag.Date.HM)
unique(beep.dat$Tag.Date.HM)
