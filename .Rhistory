if(filetype == 'gps' & all(is.na(contents[,2]))) {file_err <- 7}
}
# print(contents)
} else {file_err <- 2}
contents
file_err <- 0
myrowfix <- c()
ignore <- FALSE
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
if (filetype == "raw" & ncol(contents) > 6) {
contents <- contents[,1:6]
ignore <- TRUE
}
(nchar(contents$NodeId) == 6 & !is.na(contents$NodeId))
contents1 <- contents[(nchar(contents$NodeId) == 6 & !is.na(contents$NodeId)),]
contents1
contents1 <- contents[(nchar(contents$NodeId) == 6 | is.na(contents$NodeId)),]
contents1
source("~/Documents/R/celltracktech/R/api_postgres.R")
source("~/Documents/R/celltracktech/R/api_postgres.R")
source("~/Documents/R/celltracktech/R/api_postgres.R")
source("~/Documents/R/api_run_sean.R")
source("~/Documents/R/api_run_sean.R")
source("~/Documents/R/api_run_sean.R")
source("~/Documents/R/api_run_sean.R")
project_list(my_token, "CTT Office")
id <- 20
projbasename <- "CTT Office"
my_stations <- getStations(project_id = id)
mystation
mystations
my_stations
myfiles <- list.files(file.path(outpath), recursive = TRUE)
dir.create(file.path(outpath, projbasename), showWarnings = FALSE)
files_loc <- sapply(strsplit(myfiles, "/"), tail, n = 1)
my_stations <- getStations(project_id = id)
if (!is.null(my_station)) {
my_stations[["stations"]] <- list(my_stations[[1]][[which(sapply(my_stations[[1]], function(x) x[["station"]][["id"]] == my_station))]])
}
my_station <- NULL
files_avail <- lapply(my_stations[["stations"]], function(station, mybeginning = beginning, myending = ending) {
print(station)
if (is.null(mybeginning)) {
beginning <- as.POSIXct(station[["deploy-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else {
beginning <- as.POSIXct(as.Date(mybeginning), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
kwargs <- list(
station_id = station[["station"]][["id"]],
begin = beginning
)
print(is.null(myending))
if (!is.null(myending)) {
kwargs[["end"]] <- as.POSIXct(as.Date(myending), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else if (!is.null(station[["end-at"]])) {
kwargs[["end"]] <- as.POSIXct(station[["end-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
print(kwargs)
# print("getting station file list...")
file_info <- do.call(getStationFileList, kwargs)
outfiles <- file_info[["files"]]
# print(outfiles)
# print(paste(length(outfiles), "files available"))
return(outfiles)
})
mybeginning <- NULL
if (!is.null(my_station)) {
my_stations[["stations"]] <- list(my_stations[[1]][[which(sapply(my_stations[[1]], function(x) x[["station"]][["id"]] == my_station))]])
}
files_avail <- lapply(my_stations[["stations"]], function(station, mybeginning = beginning, myending = ending) {
print(station)
if (is.null(mybeginning)) {
beginning <- as.POSIXct(station[["deploy-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else {
beginning <- as.POSIXct(as.Date(mybeginning), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
kwargs <- list(
station_id = station[["station"]][["id"]],
begin = beginning
)
print(is.null(myending))
if (!is.null(myending)) {
kwargs[["end"]] <- as.POSIXct(as.Date(myending), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else if (!is.null(station[["end-at"]])) {
kwargs[["end"]] <- as.POSIXct(station[["end-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
print(kwargs)
# print("getting station file list...")
file_info <- do.call(getStationFileList, kwargs)
outfiles <- file_info[["files"]]
# print(outfiles)
# print(paste(length(outfiles), "files available"))
return(outfiles)
})
beginning <- NULL
files_avail <- lapply(my_stations[["stations"]], function(station, mybeginning = beginning, myending = ending) {
print(station)
if (is.null(mybeginning)) {
beginning <- as.POSIXct(station[["deploy-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else {
beginning <- as.POSIXct(as.Date(mybeginning), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
kwargs <- list(
station_id = station[["station"]][["id"]],
begin = beginning
)
print(is.null(myending))
if (!is.null(myending)) {
kwargs[["end"]] <- as.POSIXct(as.Date(myending), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else if (!is.null(station[["end-at"]])) {
kwargs[["end"]] <- as.POSIXct(station[["end-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
print(kwargs)
# print("getting station file list...")
file_info <- do.call(getStationFileList, kwargs)
outfiles <- file_info[["files"]]
# print(outfiles)
# print(paste(length(outfiles), "files available"))
return(outfiles)
})
myending <- NULL
ending <- NULL
files_avail <- lapply(my_stations[["stations"]], function(station, mybeginning = beginning, myending = ending) {
print(station)
if (is.null(mybeginning)) {
beginning <- as.POSIXct(station[["deploy-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else {
beginning <- as.POSIXct(as.Date(mybeginning), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
kwargs <- list(
station_id = station[["station"]][["id"]],
begin = beginning
)
print(is.null(myending))
if (!is.null(myending)) {
kwargs[["end"]] <- as.POSIXct(as.Date(myending), format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
} else if (!is.null(station[["end-at"]])) {
kwargs[["end"]] <- as.POSIXct(station[["end-at"]], format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
}
print(kwargs)
# print("getting station file list...")
file_info <- do.call(getStationFileList, kwargs)
outfiles <- file_info[["files"]]
# print(outfiles)
# print(paste(length(outfiles), "files available"))
return(outfiles)
})
begin <- as.POSIXct("2024-07-30T00:18:00.000Z", format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC", optional = TRUE)
begin
source("~/Documents/R/api_run_sean.R")
e <- "/home/jess/Documents/radio_projects/data/radio_projects/office/CTT Office/V30B0154B577/blu/CTT-V30B0154B577-blu.2024-08-29_184510.csv.gz"
#library(celltracktech)
library(DBI)
library(RPostgres)
start <- Sys.time()
####SETTINGS#####
my_token <- "d20922a756795c9857fb1dce6c4c3bb3be4c50cd3090e30a869ab647f031cb60"
db_name <- "office"
myproject <- "CTT Office" #this is your project name on your CTT account
conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
################
outpath <- "~/Documents/radio_projects/data/radio_projects/office" #where your downloaded files are to go 1055204
d <- conn
myfiles <- list.files(file.path(outpath, myproject), recursive = TRUE, full.names = TRUE)
files_loc <- basename(myfiles)
allnode <- DBI::dbReadTable(d, "data_file")
if (fix) {
res <- DBI::dbGetQuery(d, "select distinct path from gps")
res2 <- DBI::dbGetQuery(d, "select distinct path from raw")
res1 <- DBI::dbGetQuery(d, "select distinct path from node_health")
filesdone <- c(res$path, res1$path, res2$path)
} else {
filesdone <- allnode$path
}
fix <- F
if (fix) {
res <- DBI::dbGetQuery(d, "select distinct path from gps")
res2 <- DBI::dbGetQuery(d, "select distinct path from raw")
res1 <- DBI::dbGetQuery(d, "select distinct path from node_health")
filesdone <- c(res$path, res1$path, res2$path)
} else {
filesdone <- allnode$path
}
files_import <- myfiles[which(!files_loc %in% filesdone)]
files_import <- files_import[unname(sapply(files_import, function(x) get_file_info(x)[[1]])) %in% c("gps", "node_health", "raw", "blu")]
source("~/Documents/R/celltracktech/R/api_postgres.R")
files_import <- files_import[unname(sapply(files_import, function(x) get_file_info(x)[[1]])) %in% c("gps", "node_health", "raw", "blu")]
tail(files_import)
files_import
e
# e <- file.path(outpath, myproject, e)
print(paste("attempting file import", e))
out <- get_file_info(e)
filetype <- out$filetype
sensor <- out$sensor
y <- out$y
i <- DBI::dbReadTable(conn, "ctt_project_station")
begin <- i[i$station_id == sensor, ]$deploy_at
if (length(begin) == 0) {
begin <- as.POSIXct("2018-01-01")
}
# print("attempting import")
outtest <- file_handle(e, filetype)
contents <- outtest[[1]]
errtype <- outtest[[2]]
# file_err <- fileimp[[2]]
# print("inserting contents")
#print(fix)
print(errtpe)
#print(filetype)
print(y)
errtype < 7 & errtype != 2
timecols <- c("Time") # , "recorded at", "gps at", "RecordedAt", "recorded.at", "gps.at")
for (x in timecols) {
if (x %in% names(contents)) {
contents <- dplyr::filter(contents, (!!as.name(x)) < Sys.time() & (!!as.name(x)) > begin)
}
}
contents <- data.frame(contents)
contents
head(contents)
!is.null(contents) & nrow(contents) > 0
contents$station_id <- sensor
contents$path <- y
filetype == "blu"
# print(names(contents))
contents <- contents[!is.na(contents$TagId), ]
contents$RadioId <- as.integer(contents$RadioId)
contents$TagRSSI <- as.integer(contents$TagRSSI)
contents$UsbPort <- as.integer(contents$UsbPort)
contents$BluRadioId <- as.integer(contents$BluRadioId)
contents$Sync <- as.integer(contents$Sync)
contents$Product <- as.integer(contents$Product)
contents$Revision <- as.integer(contents$Revision)
contents$Payload <- as.character(contents$Payload)
head(contents)
names(contents) <- sapply(names(contents), function(x) gsub("([[:lower:]])([[:upper:]])", "\\1_\\2", x))
names(contents) <- tolower(names(contents))
length(which(!is.na(contents$node_id))) > 0
if (length(which(!is.na(contents$node_id))) > 0) { # if there is anything beside NA nodes
nodeids <- contents$node_id[which(!is.na(contents$node_id))]
insertnew <- DBI::dbSendQuery(conn, paste("INSERT INTO ", "nodes (node_id)", " VALUES ($1)
ON CONFLICT DO NOTHING", sep = ""))
DBI::dbBind(insertnew, params = list(unique(nodeids)))
DBI::dbClearResult(insertnew)
nodecheck <- contents[!is.na(contents$node_id), ]
nodecheck <- nodecheck[!duplicated(nodecheck[c("time", "tag_id", "node_id", "tag_rssi")]), ]
badrec <- nodecheck[duplicated(nodecheck[c("time", "tag_id", "node_id")]), ]
if (nrow(badrec) > 0) {
nodecheck$id <- paste(nodecheck$time, nodecheck$tag_id, nodecheck$node_id)
badrec$id <- paste(badrec$time, badrec$tag_id, badrec$node_id)
#nodecheck <- nodecheck[!nodecheck$id %in% badrec$id, ]
nodecheck$id <- NULL
}
# print(nrow(nodecheck))
contents <- rbind(nodecheck, contents[is.na(contents$node_id), ])
if (is.na(sensor)) {
contents <- contents[is.na(contents$station_id), ] #this is for bringing in raw node files
}
}
head(contents)
length(which(nchar(contents$tag_id) != 8)) > 0
if (length(which(nchar(contents$tag_id) != 8)) > 0) { # if there are tag ids greater than 8...
contents <- contents[-which(nchar(contents$tag_id) != 8), ] # drop rows where TagId not 8 characters
}
vars <- paste(DBI::dbListFields(conn, filetype)[2:length(DBI::dbListFields(conn, filetype))], sep = "", collapse = ",")
vals <- paste(seq_along(1:(length(DBI::dbListFields(conn, filetype)) - 1)), sep = "", collapse = ", $")
contents <- contents[, DBI::dbListFields(conn, filetype)[2:length(DBI::dbListFields(conn, filetype))]]
head(contents)
any(row.names(contents) == "NA")
if (any(row.names(contents) == "NA")) {
contents <- contents[-which(row.names(contents) == "NA"), ]
}
#db_cleanup(conn)
dbDisconnect(conn)
devtools::update_packages("celltracktech")
dbDisconnect(conn)
?tempdir()
install.packages("MonetDBLite")
install.packages("duckdb")
?con
con
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
library(DBI)
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
con
str(con)
is.duckdb_connection()
con@driver
format(con)
grep("duckdb", con)
grep("duckdb", format(con))
grep("kdfs", format(con))
if(grep("kdfs", format(con)))
)
length(grep("kdfs", format(con))
)
conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
conn <- dbConnect(RPostgres::Postgres(), dbname="office")
format(conn)
source("~/Documents/R/celltracktech/R/api_postgres.R")
library(celltracktech)
library(DBI)
library(RPostgres)
library(duckdb)
start <- Sys.time()
####SETTINGS#####
my_token <- "d20922a756795c9857fb1dce6c4c3bb3be4c50cd3090e30a869ab647f031cb60"
db_name <- "office"
myproject <- "CTT Office" #this is your project name on your CTT account
################
outpath <- "~/Documents/radio_projects/data/radio_projects/office" #where your downloaded files are to go 1055204
get_my_data(my_token, outpath, con, myproject=myproject)
source("~/Documents/R/celltracktech/R/api_postgres.R")
get_my_data(my_token, outpath, con, myproject=myproject)
source("~/Documents/R/celltracktech/R/api_postgres.R")
get_my_data(my_token, outpath, con, myproject=myproject)
source("~/Documents/R/celltracktech/R/api_postgres.R")
get_my_data(my_token, outpath, con, myproject=myproject)
source("~/Documents/R/celltracktech/R/api_postgres.R")
get_my_data(my_token, outpath, con, myproject=myproject)
source("~/Documents/R/celltracktech/R/api_postgres.R")
get_my_data(my_token, outpath, con, myproject=myproject)
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
raw <- tbl(con, "raw")
head(raw)
devtools::update_packages("celltracktech")
#db_cleanup(conn)
dbDisconnect(con)
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
library(celltracktech)
library(DBI)
library(RPostgres)
library(duckdb)
start <- Sys.time()
#conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/my-db.duckdb", read_only = FALSE)
tbl(con, "node_health")
y <- "/home/jess/Documents/radio_projects/data/radio_projects/office/CTT Office/V30B0154B577/node_health/CTT-V30B0154B577-node-health.2024-07-15_161339.csv.gz"
d <- con
outpath <- "/home/jess/Documents/radio_projects/data/radio_projects/office"
myproject <- "CTT Office"
conn <- con
e <- y
out <- get_file_info(e)
filetype <- out$filetype
source("~/Documents/R/celltracktech/R/api_postgres.R")
out <- get_file_info(e)
filetype <- out$filetype
filetype
sensor <- out$sensor
y <- out$y
i <- DBI::dbReadTable(conn, "ctt_project_station")
begin <- i[i$station_id == sensor, ]$deploy_at
if (length(begin) == 0) {
begin <- as.POSIXct("2018-01-01")
}
# print("attempting import")
outtest <- file_handle(e, filetype)
contents <- outtest[[1]]
errtype <- outtest[[2]]
contents
print(paste("checking file for errors:", e))
file_err <- 0
myrowfix <- c()
ignore <- FALSE
contents <- tryCatch(
{
readr::read_csv(e, col_names = TRUE)
},
error = function(err) {
return(NULL)
}
)
contents
if (filetype == "raw" & ncol(contents) > 6) {
contents <- contents[,1:6]
ignore <- TRUE
}
!is.null(contents) & nrow(contents > 0)
delete.columns <- grep("[[:digit:]]", colnames(contents), perl = T)
length(delete.columns) > 0
if (length(delete.columns) > 0) {
file_err <- 1
myrowfix <- tryCatch(
{
myrowfix <- Correct_Colnames(contents)
myrowfix[1] <- strsplit(Correct_Colnames(contents)[1], "[.]")[[1]][1]
myrowfix[2] <- strsplit(Correct_Colnames(contents)[2], "[.]")[[1]][1]
myrowfix[3] <- strsplit(Correct_Colnames(contents)[3], "\\.\\.")[[1]][1] # were there files where this wasn't correctly split?
myrowfix[4] <- strsplit(Correct_Colnames(contents)[4], "\\.\\.")[[1]][1]
myrowfix[5] <- strsplit(Correct_Colnames(contents)[5], "\\.\\.")[[1]][1]
if (nchar(myrowfix[5]) < 1) {
myrowfix[5] <- NA
}
if (length(myrowfix) > 5) {
myrowfix[6] <- strsplit(Correct_Colnames(contents)[6], "[.]")[[1]][1]
}
if (length(myrowfix) > 6) {
myrowfix[7] <- strsplit(Correct_Colnames(contents)[7], "\\.\\.")[[1]][1]
myrowfix[7] <- strsplit(myrowfix[7], "[_]")[[1]][1]
myrowfix[8] <- strsplit(Correct_Colnames(contents)[8], "\\.\\.")[[1]][1]
}
if (length(myrowfix) > 9) {
myrowfix[12] <- strsplit(Correct_Colnames(contents)[12], "\\.\\.")[[1]][1]
myrowfix[13] <- strsplit(Correct_Colnames(contents)[13], "\\.\\.")[[1]][1]
}
# rowfix <- data.frame(as.POSIXct(rowfix[1], tz="UTC"), as.integer(rowfix[2]), rowfix[3], rowfix[4], rowfix[5], as.integer(rowfix[6]))
myrowfix
# names(rowfix) <- names(contents)
# rbind(contents, rowfix)
},
error = function(err) {
return(data.frame())
}
)
# contents <- newcontents
}
ignore
if(!ignore){
rowtest <- badrow(e, contents, filetype)
contents <- rowtest[[1]]
} else {
rowtest <- list(contents,0)
#myrowfix <- c()
}
rowtest
contents
if (length(delete.columns) > 0) {
if (ncol(contents) > 9 & ncol(contents) < 14) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius", "RecordedAt", "firmware", "SolarVolts", "SolarCurrent", "CumulativeSolarCurrent", "latitude", "longitude")
if (length(myrowfix) > 0) {
time <- timecheck(contents, myrowfix)
rowfix <- data.frame(time, as.integer(myrowfix[2]), myrowfix[3], as.integer(myrowfix[4]), as.numeric(myrowfix[5]), as.numeric(myrowfix[6]), as.POSIXct(myrowfix[7], tz = "UTC"), myrowfix[8], as.numeric(myrowfix[9]), as.numeric(myrowfix[10]), as.numeric(myrowfix[11]), as.numeric(myrowfix[12]), as.numeric(myrowfix[13]))
names(rowfix) <- names(contents)
contents <- rbind(contents, rowfix)
}
} else if (ncol(contents) < 9) {
names(contents) <- c("Time", "RadioId", "NodeId", "NodeRssi", "Battery", "celsius")
}
}
contents
devtools::update_packages("celltracktech")
devtools::update_packages("celltracktech")
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
library(celltracktech)
library(DBI)
library(RPostgres)
library(duckdb)
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
tbl(con, "raw") %>%
ungroup() %>%
summarise(num = n())
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
dataduck <- tbl(con, "data_file") %>% pull()
dataduck
#db_cleanup(conn)
dbDisconnect(con)
source("~/Documents/R/api_run_sean.R")
source("~/Documents/R/api_run_sean.R")
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
con <- dbConnect(duckdb::duckdb(), dbdir = "/home/jess/Documents/radio_projects/data/radio_projects/office/my-db.duckdb", read_only = FALSE)
tbl(con, "data_file") %>%
ungroup() %>%
summarise(num = n())
tbl(con, "raw") %>%
ungroup() %>%
summarise(num = n())
dbDisconnect(con)
library(dplyr)
library(lubridate)
library(ggplot2)
# Reset R's brain - removes all previous objects
rm(list=ls())
## Set by User
# Working Directory - Provide/path/on/your/computer/where/master/csv/file/of/nodes/is/found/and/where/Functions_CTT.Network.R/is/located
working.directory <- "/home/jess/Documents/radio_projects/EcolEvol.Manuscript_Optimizing.Trilateration"
# Directory for Output data - Provide/path/where/you/want/output/data/to/be/stored/
outpath <- "/home/jess/Documents/radio_projects/paxton/"
## Bring in functions
setwd(working.directory)
source("4_Functions_RSS.Based.Localizations.R")
## Bring in 3 Needed files - Test Information, RSS values, and Node Information - change file names in " " as needed
test.info <- read.csv("Test.Info_Example.csv", header = T)
test.info <- read.csv("~/Downloads/cal_20m_up.csv")
head(test.info)
vars <- trunc(test.info$Latitude*100)/100
vars
vars <- trunc(test.info$Latitude*1000)/1000
vars
vars <- trunc(test.info$Latitude*10000)/10000
vars
## Bring in 3 Needed files - Test Information, RSS values, and Node Information - change file names in " " as needed
test.info <- read.csv("Test.Info_Example.csv", header = T)
head(test.info)
